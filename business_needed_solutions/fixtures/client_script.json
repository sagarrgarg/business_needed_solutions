[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-04-05 00:45:33.607704",
  "module": "Business Needed Solutions",
  "name": "Compounded Discounts",
  "script": "// Constants for discount field names\nconst DISCOUNT_FIELDS = ['custom_d1_', 'custom_d2_', 'custom_d3_'];\n\n// Main form handlers\nfrappe.ui.form.on('Sales Invoice', {\n    onload: function(frm) {\n        // Get the discount type from BNS Settings\n        getDiscountType(frm);\n        \n        // Set up grid click handler\n        setupGridClickHandler(frm);\n    },\n    refresh: function(frm) {\n        toggleReadonlyFields(frm);\n    }\n});\n\n// Sales Invoice Item handlers\nfrappe.ui.form.on('Sales Invoice Item', {\n    custom_d1_: function(frm, cdt, cdn) {\n        updateDiscountAndToggleReadonly(frm, cdt, cdn);\n    },\n    custom_d2_: function(frm, cdt, cdn) {\n        updateDiscountAndToggleReadonly(frm, cdt, cdn);\n    },\n    custom_d3_: function(frm, cdt, cdn) {\n        updateDiscount(frm, cdt, cdn);\n    },\n    items_add: function(frm) {\n        toggleReadonlyFields(frm);\n    },\n    items_remove: function(frm) {\n        toggleReadonlyFields(frm);\n    }\n});\n\n// Helper functions\nfunction getDiscountType(frm) {\n    frappe.call({\n        method: \"frappe.client.get_single_value\",\n        args: {\n            doctype: \"BNS Settings\",\n            field: \"discount_type\"\n        },\n        callback: function(response) {\n            if (!response.exc) {\n                frm.doc.discount_type = response.message || \"Single Discount\";\n                toggleDiscountFields(frm);\n            }\n        }\n    });\n}\n\nfunction setupGridClickHandler(frm) {\n    frm.fields_dict.items.grid.wrapper.on('click', function() {\n        setTimeout(function() {\n            toggleReadonlyFields(frm);\n        }, 100);\n    });\n}\n\nfunction updateDiscountAndToggleReadonly(frm, cdt, cdn) {\n    updateDiscount(frm, cdt, cdn);\n    toggleReadonlyFields(frm);\n}\n\nfunction updateDiscount(frm, cdt, cdn) {\n    let item = locals[cdt][cdn];\n    let d1 = item.custom_d1_ || 0;\n    let d2 = item.custom_d2_ || 0;\n    let d3 = item.custom_d3_ || 0;\n\n    let original_rate = item.price_list_rate || 0;\n\n    // Calculate compounded discount\n    let discounted_rate_d1 = original_rate * (1 - d1 / 100);\n    let discounted_rate_d2 = discounted_rate_d1 * (1 - d2 / 100);\n    let final_discounted_rate = discounted_rate_d2 * (1 - d3 / 100);\n\n    // Calculate total discount percentage\n    let total_discount = 100 - (final_discounted_rate / original_rate * 100);\n\n    // Update the discount percentage field\n    frappe.model.set_value(cdt, cdn, 'discount_percentage', total_discount);\n}\n\nfunction toggleReadonlyFields(frm) {\n    // If discount type is Single Discount, we don't need to toggle read-only fields\n    if (frm.doc.discount_type === \"Single Discount\") {\n        return;\n    }\n    \n    // Process each row in the grid\n    frm.fields_dict.items.grid.grid_rows.forEach(function(row) {\n        let item = row.doc;\n        let custom_d1_filled = item.custom_d1_ != null && item.custom_d1_ != 0;\n        let custom_d2_filled = item.custom_d2_ != null && item.custom_d2_ != 0;\n\n        // Set read-only states for d2 and d3 fields\n        frappe.meta.get_docfield('Sales Invoice Item', 'custom_d2_').read_only = !custom_d1_filled;\n        frappe.meta.get_docfield('Sales Invoice Item', 'custom_d3_').read_only = !(custom_d1_filled && custom_d2_filled);\n\n        // Update grid fields' display state\n        row.toggle_editable('custom_d2_', custom_d1_filled);\n        row.toggle_editable('custom_d3_', custom_d1_filled && custom_d2_filled);\n    });\n\n    // Refresh the grid to apply changes\n    frm.fields_dict.items.grid.refresh();\n}\n\nfunction toggleDiscountFields(frm) {\n    // Directly manipulate the grid columns visibility\n    const isSingleDiscount = frm.doc.discount_type === \"Single Discount\";\n    \n    // Toggle visibility for all discount fields\n    DISCOUNT_FIELDS.forEach(field => {\n        frm.fields_dict.items.grid.toggle_display(field, !isSingleDiscount);\n    });\n    \n    // Update custom fields in the database\n    updateCustomFieldsInDB(frm, isSingleDiscount);\n}\n\nfunction updateCustomFieldsInDB(frm, isSingleDiscount) {\n    frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: \"Custom Field\",\n            filters: {\n                dt: \"Sales Invoice Item\",\n                fieldname: [\"in\", DISCOUNT_FIELDS],\n                module: \"Business Needed Solutions\"\n            },\n            fields: [\"name\", \"fieldname\", \"hidden\"]\n        },\n        callback: function(response) {\n            if (!response.exc && response.message) {\n                // Update each custom field\n                response.message.forEach(function(field) {\n                    frappe.db.set_value(\"Custom Field\", field.name, \"hidden\", isSingleDiscount ? 1 : 0);\n                });\n                \n                // Refresh the form to apply changes\n                frm.refresh();\n            }\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-03-09 02:39:47.641247",
  "module": "Business Needed Solutions",
  "name": "Hide Column ID Lead",
  "script": "frappe.listview_settings[\"Lead\"]={\n    hide_name_column : true,\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-04-02 02:42:48.645235",
  "module": "Business Needed Solutions",
  "name": "Direct Print",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        // Override the original print button behavior\n        var $printButton = frm.page.wrapper.find('button[data-original-title=\"Print\"]');\n        $printButton.off('click'); // Remove the existing click handler\n        $printButton.addClass('dropdown-toggle');\n        $printButton.attr('data-toggle', 'dropdown');\n\n        // Check if dropdown menu already exists\n        if (!$printButton.next('.dropdown-menu').length) {\n            // Generate the dropdown options dynamically\n            var dropdownMenu123 = $('<div class=\"dropdown-menu\"></div>');\n            $.each(frm.fields_dict.invoice_copy.df.options.split('\\n'), function(i, option) {\n                if (option) {\n                    dropdownMenu123.append('<a class=\"dropdown-item\" href=\"#\" data-print-option=\"' + option + '\">' + option + '</a>');\n                }\n            });\n            $printButton.after(dropdownMenu123);\n        }\n\n        // Handle the dropdown selection using event delegation\n        frm.page.wrapper.find('.dropdown-menu').on('click', '.dropdown-item', function(event) {\n            event.preventDefault();\n            var printOption = $(this).data('print-option');\n            print_with_option(frm, printOption);\n        });\n        \n        // Add event listener for Ctrl + P or Command + P\n        $(document).on('keydown.print', function(event) {\n            if ((event.ctrlKey || event.metaKey) && (event.key === 'p' || event.key === 'P')) {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                var defaultPrintOption = frm.fields_dict.invoice_copy.df.options.split('\\n')[0]; // Assuming the first option as default\n                print_with_option(frm, defaultPrintOption);\n            }\n        });\n    }\n});\n\nfunction print_with_option(frm, option) {\n    frappe.call({\n        method: \"frappe.client.set_value\",\n        args: {\n            doctype: frm.doc.doctype,\n            name: frm.doc.name,\n            fieldname: \"invoice_copy\",\n            value: option\n        },\n        callback: function(response) {\n            if (!response.exc) {\n                generate_pdf(frm);\n            }\n        }\n    });\n}\n\nfunction generate_pdf(frm) {\n    var print_format = \"BNS SI -V2 (d1d2d3)\"; // Specify your print format name\n    var letterhead = frm.doc.letter_head || ''; // Check if the document has a letterhead\n    var no_letterhead = letterhead == '' ? 1 : 0; // Set no_letterhead parameter based on the presence of a letterhead\n    var pdf_url = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\" \n        + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\n        + \"&name=\" + encodeURIComponent(frm.doc.name)\n        + \"&format=\" + encodeURIComponent(print_format)\n        + \"&no_letterhead=\" + no_letterhead\n        + (letterhead ? \"&letterhead=\" + encodeURIComponent(letterhead) : ''));\n\n    var printWindow = window.open(pdf_url);\n    if (printWindow) {\n        printWindow.addEventListener('load', function() {\n            printWindow.print();\n        });\n    } else {\n        frappe.msgprint(__('Please allow pop-ups to print the document.'));\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2025-03-09 02:53:59.099915",
  "module": "Business Needed Solutions",
  "name": "Hide ID Column Journal",
  "script": "frappe.listview_settings[\"Journal Entry\"]={\n    hide_name_column : true,\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-04-02 02:43:06.492884",
  "module": "Business Needed Solutions",
  "name": "PO Direct Print",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        // Override the original print button behavior\n        var $printButton = frm.page.wrapper.find('button[data-original-title=\"Print\"]');\n        $printButton.off('click'); // Remove the existing click handler\n\n        // Add new click handler for a simple print action\n        $printButton.on('click', function() {\n            generate_pdf(frm); // Directly generate the PDF without options\n        });\n\n        // Add event listener for Ctrl + P or Command + P\n        $(document).on('keydown.print', function(event) {\n            if ((event.ctrlKey || event.metaKey) && (event.key === 'p' || event.key === 'P')) {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                generate_pdf(frm); // Directly print the default format when Ctrl + P or Command + P is pressed\n            }\n        });\n    }\n});\n\nfunction generate_pdf(frm) {\n    var print_format = \"BNS PO - V1\"; // Specify your print format name\n    var letterhead = frm.doc.letter_head || ''; // Check if the document has a letterhead\n    var no_letterhead = letterhead === '' ? 1 : 0; // Set no_letterhead parameter based on the presence of a letterhead\n    var pdf_url = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\" \n        + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\n        + \"&name=\" + encodeURIComponent(frm.doc.name)\n        + \"&format=\" + encodeURIComponent(print_format)\n        + \"&no_letterhead=\" + no_letterhead\n        + (letterhead ? \"&letterhead=\" + encodeURIComponent(letterhead) : ''));\n\n    var printWindow = window.open(pdf_url);\n    if (printWindow) {\n        printWindow.addEventListener('load', function() {\n            printWindow.print();\n        });\n    } else {\n        frappe.msgprint(__('Please allow pop-ups to print the document.'));\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-04-02 02:43:25.455522",
  "module": "Business Needed Solutions",
  "name": "Direct Print DN",
  "script": "frappe.ui.form.on('Delivery Note', {\n    refresh: function(frm) {\n        // Override the original print button behavior\n        var $printButton = frm.page.wrapper.find('button[data-original-title=\"Print\"]');\n        $printButton.off('click'); // Remove the existing click handler\n\n        // Add new click handler for a simple print action\n        $printButton.on('click', function() {\n            generate_pdf(frm); // Directly generate the PDF without options\n        });\n\n        // Add event listener for Ctrl + P or Command + P\n        $(document).on('keydown.print', function(event) {\n            if ((event.ctrlKey || event.metaKey) && (event.key === 'p' || event.key === 'P')) {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                generate_pdf(frm); // Directly print the default format when Ctrl + P or Command + P is pressed\n            }\n        });\n    }\n});\n\nfunction generate_pdf(frm) {\n    var print_format = \"BNS Delivery Note - V1\"; // Specify your print format name\n    var letterhead = frm.doc.letter_head || ''; // Check if the document has a letterhead\n    var no_letterhead = letterhead === '' ? 1 : 0; // Set no_letterhead parameter based on the presence of a letterhead\n    var pdf_url = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\" \n        + \"doctype=\" + encodeURIComponent(frm.doc.doctype)\n        + \"&name=\" + encodeURIComponent(frm.doc.name)\n        + \"&format=\" + encodeURIComponent(print_format)\n        + \"&no_letterhead=\" + no_letterhead\n        + (letterhead ? \"&letterhead=\" + encodeURIComponent(letterhead) : ''));\n\n    var printWindow = window.open(pdf_url);\n    if (printWindow) {\n        printWindow.addEventListener('load', function() {\n            printWindow.print();\n        });\n    } else {\n        frappe.msgprint(__('Please allow pop-ups to print the document.'));\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-09 02:48:58.753885",
  "module": "Business Needed Solutions",
  "name": "Stock entry customisation",
  "script": "frappe.ui.form.on('Stock Entry', {\n    before_save: function (frm) {\n        console.log(\"Before Save Triggered\"); // Debugging\n        console.log(\"Stock Entry Type:\", frm.doc.stock_entry_type); // Debugging\n        console.log(\"Outgoing Stock Entry:\", frm.doc.outgoing_stock_entry); // Debugging\n\n        // Check if Stock Entry Type is Material Transfer and outgoing_stock_entry is not set\n        if (frm.doc.stock_entry_type === 'Material Transfer' && !frm.doc.outgoing_stock_entry) {\n            console.log(\"Setting Add to Transit to 1\"); // Debugging\n            frm.set_value('add_to_transit', 1); // Set Add to Transit to 1\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-03-09 02:47:47.148283",
  "module": "Business Needed Solutions",
  "name": "Hide Column ID PI",
  "script": "frappe.listview_settings[\"Purchase Invoice\"] = {\n    hide_name_column: true,\n}",
  "view": "List"
 }
]